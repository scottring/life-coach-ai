import React, { useState, useEffect } from 'react';
import { XMarkIcon, PlusIcon, MinusIcon } from '@heroicons/react/24/outline';
import { SOP, SOPStep, SOPCategory } from '../types/sop';
import { ContextMember } from '../types/context';
import { sopService } from '../services/sopService';
import { contextService } from '../services/contextService';

interface CreateSOPModalProps {
  isOpen: boolean;
  onClose: () => void;
  contextId: string;
  userId: string;
  onSOPCreated?: (sop: SOP) => void;
}

const CreateSOPModal: React.FC<CreateSOPModalProps> = ({
  isOpen,
  onClose,
  contextId,
  userId,
  onSOPCreated
}) => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState<SOPCategory>('custom');
  const [difficulty, setDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');
  const [tags, setTags] = useState<string[]>([]);
  const [newTag, setNewTag] = useState('');
  const [steps, setSteps] = useState<Omit<SOPStep, 'id'>[]>([
    {
      stepNumber: 1,
      title: '',
      description: '',
      estimatedDuration: 5,
      isOptional: false
    }
  ]);
  const [members, setMembers] = useState<ContextMember[]>([]);
  const [assignableMembers, setAssignableMembers] = useState<string[]>([]);
  const [defaultAssignee, setDefaultAssignee] = useState<string>('');
  const [isRecurring, setIsRecurring] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (isOpen) {
      loadMembers();
    }
  }, [isOpen, contextId]);

  const loadMembers = async () => {
    try {
      const membersData = await contextService.getContextMembers(contextId);
      setMembers(membersData);
    } catch (err) {
      console.error('Error loading members:', err);
    }
  };

  const categories: { value: SOPCategory; label: string; icon: string }[] = [
    { value: 'morning', label: 'Morning Routine', icon: '🌅' },
    { value: 'evening', label: 'Evening Routine', icon: '🌙' },
    { value: 'leaving', label: 'Leaving House', icon: '🏃‍♂️' },
    { value: 'cleanup', label: 'Cleanup', icon: '🧹' },
    { value: 'meal-prep', label: 'Meal Prep', icon: '👨‍🍳' },
    { value: 'work', label: 'Work Process', icon: '💼' },
    { value: 'custom', label: 'Custom', icon: '⚙️' }
  ];

  const addStep = () => {
    setSteps([...steps, {
      stepNumber: steps.length + 1,
      title: '',
      description: '',
      estimatedDuration: 5,
      isOptional: false
    }]);
  };

  const removeStep = (index: number) => {
    if (steps.length > 1) {
      const newSteps = steps.filter((_, i) => i !== index);
      // Renumber steps
      setSteps(newSteps.map((step, i) => ({ ...step, stepNumber: i + 1 })));
    }
  };

  const updateStep = (index: number, updates: Partial<Omit<SOPStep, 'id'>>) => {
    const newSteps = [...steps];
    newSteps[index] = { ...newSteps[index], ...updates };
    setSteps(newSteps);
  };

  const addTag = () => {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      setTags([...tags, newTag.trim()]);
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!name.trim() || steps.some(step => !step.title.trim())) {
      setError('Please fill in all required fields');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const sopData: Omit<SOP, 'id' | 'createdAt' | 'updatedAt' | 'version' | 'estimatedDuration'> = {
        contextId,
        name: name.trim(),
        description: description.trim(),
        category,
        tags,
        difficulty,
        status: 'active',
        assignableMembers,
        defaultAssignee: defaultAssignee || undefined,
        requiresConfirmation: false,
        steps: steps.map(step => ({
          ...step,
          id: '', // Will be generated by service
          title: step.title.trim(),
          description: step.description?.trim() || ''
        })),
        executionOrder: 'sequential',
        isRecurring,
        createdBy: userId
      };

      const newSOP = await sopService.createSOP(contextId, sopData);
      onSOPCreated?.(newSOP);
      handleClose();
    } catch (err) {
      console.error('Error creating SOP:', err);
      setError('Failed to create SOP. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setName('');
    setDescription('');
    setCategory('custom');
    setDifficulty('medium');
    setTags([]);
    setNewTag('');
    setSteps([{
      stepNumber: 1,
      title: '',
      description: '',
      estimatedDuration: 5,
      isOptional: false
    }]);
    setAssignableMembers([]);
    setDefaultAssignee('');
    setIsRecurring(false);
    setError(null);
    onClose();
  };

  const totalDuration = steps.reduce((sum, step) => sum + step.estimatedDuration, 0);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Create New SOP</h2>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>

        {/* Content */}
        <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-md p-3 text-red-600 text-sm">
                {error}
              </div>
            )}

            {/* Basic Info */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  SOP Name *
                </label>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="e.g., Morning Routine"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Category
                </label>
                <select
                  value={category}
                  onChange={(e) => setCategory(e.target.value as SOPCategory)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                >
                  {categories.map(cat => (
                    <option key={cat.value} value={cat.value}>
                      {cat.icon} {cat.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Description
              </label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Brief description of this SOP..."
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {/* Difficulty and Duration */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Difficulty
                </label>
                <select
                  value={difficulty}
                  onChange={(e) => setDifficulty(e.target.value as 'easy' | 'medium' | 'hard')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="easy">Easy</option>
                  <option value="medium">Medium</option>
                  <option value="hard">Hard</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Total Duration
                </label>
                <div className="px-3 py-2 bg-gray-50 border border-gray-300 rounded-md text-gray-700">
                  {totalDuration} minutes
                </div>
              </div>
            </div>

            {/* Steps */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <label className="block text-sm font-medium text-gray-700">
                  Steps *
                </label>
                <button
                  type="button"
                  onClick={addStep}
                  className="flex items-center space-x-1 px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm"
                >
                  <PlusIcon className="w-4 h-4" />
                  <span>Add Step</span>
                </button>
              </div>

              <div className="space-y-3">
                {steps.map((step, index) => (
                  <div key={index} className="border border-gray-200 rounded-md p-4 bg-gray-50">
                    <div className="flex items-center justify-between mb-3">
                      <span className="text-sm font-medium text-gray-700">Step {step.stepNumber}</span>
                      {steps.length > 1 && (
                        <button
                          type="button"
                          onClick={() => removeStep(index)}
                          className="text-red-600 hover:text-red-800 transition-colors"
                        >
                          <MinusIcon className="w-4 h-4" />
                        </button>
                      )}
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                      <div className="md:col-span-2">
                        <input
                          type="text"
                          value={step.title}
                          onChange={(e) => updateStep(index, { title: e.target.value })}
                          placeholder="Step title"
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
                          required
                        />
                      </div>
                      <div>
                        <div className="flex items-center space-x-2">
                          <input
                            type="number"
                            value={step.estimatedDuration}
                            onChange={(e) => updateStep(index, { estimatedDuration: Math.max(1, parseInt(e.target.value) || 1) })}
                            min="1"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
                          />
                          <span className="text-sm text-gray-500">min</span>
                        </div>
                      </div>
                    </div>

                    {step.description !== undefined && (
                      <div className="mt-2">
                        <textarea
                          value={step.description}
                          onChange={(e) => updateStep(index, { description: e.target.value })}
                          placeholder="Optional step description..."
                          rows={2}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
                        />
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* Tags */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tags
              </label>
              <div className="flex flex-wrap gap-2 mb-2">
                {tags.map(tag => (
                  <span key={tag} className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-sm flex items-center space-x-1">
                    <span>{tag}</span>
                    <button
                      type="button"
                      onClick={() => removeTag(tag)}
                      className="text-blue-600 hover:text-blue-800"
                    >
                      <XMarkIcon className="w-3 h-3" />
                    </button>
                  </span>
                ))}
              </div>
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={newTag}
                  onChange={(e) => setNewTag(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                  placeholder="Add a tag..."
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
                />
                <button
                  type="button"
                  onClick={addTag}
                  className="px-3 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors text-sm"
                >
                  Add
                </button>
              </div>
            </div>
          </form>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200 bg-gray-50">
          <button
            type="button"
            onClick={handleClose}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={handleSubmit}
            disabled={loading}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:bg-blue-300"
          >
            {loading ? 'Creating...' : 'Create SOP'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default CreateSOPModal;